substitutions:
  name: esp32s3-1
  log_level: INFO
  location: "Not placed"
  f_time_size: "50"
  f_data_size: "36"
  f_name_size: "20"

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3

packages:
  wifi: !include common/wifi.yaml
  device_base: !include common/device_base.yaml
  colours: !include common/colours.yaml
  fonts: !include common/fonts.yaml

i2c:
  sda: GPIO8
  scl: GPIO9

spi:
  clk_pin: GPIO12
  mosi_pin: GPIO11
  miso_pin: GPIO13
  interface: spi2

# Define a PWM output on the ESP32
# output:
#   - platform: ledc
#     pin: GPIO16
#     id: gpio_32_backlight_pwm

switch:
  - platform: gpio
    id: backlight_ctl
    name: "Backlight Control"
    pin:
      number: GPIO16
      mode: OUTPUT

binary_sensor:
  - platform: gpio
    id: backlight_switch
    name: "Backlight Toggle"
    pin:
      number: GPIO4
      mode: INPUT_PULLDOWN
      inverted: false
    on_press:
      then:
        switch.toggle: backlight_ctl

sensor:
  - platform: adc
    id: backlight_brightness
    name: "Potentiometer"
    pin: GPIO5
    update_interval: 5s
    attenuation: auto
  - platform: adc
    id: moisture
    name: "Soil Moisture"
    pin: GPIO6
    attenuation: auto
    update_interval: 60s
    unit_of_measurement: "%"
    accuracy_decimals: 0
    filters:
      - calibrate_linear:
        - 1.4 -> 100.0
        - 3.1 -> 0.0
      - lambda: |
         if (x < 0) return 0;
         else if (x > 100) return 100;
         else return (x);
  - platform: bme280_i2c
    address: 0x76
    temperature:
      id: temperature
      name: "Temperature"
      #sample_rate: lp
    pressure:
      id: pressure
      name: "Pressure"
      #sample_rate: lp
    humidity:
      id: humidity
      name: "Humidity"
      #sample_rate: lp
  - platform: sgp30
    eco2:
      id: eco2
      name: "eCO2"
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 120
            send_every: 120
    tvoc:
      id: tvoc
      name: "TVOC"
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 120
            send_every: 120
    store_baseline: yes
    address: 0x58
    update_interval: 1s

graph:
  - id: temperature_graph
    sensor: temperature
    duration: 6h
    width: 230
    height: 100
    x_grid: 2h
    y_grid: 5 # degC/div
    color: c_data

light:
  - platform: esp32_rmt_led_strip
    id: led_rgb
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    rmt_channel: 0
    chipset: ws2812
    name: "My Light"
    effects:
      - pulse:
          transition_length: 1s
          update_interval: 2s

spi_device:
  id: spidev
#  cs_pin: GPIO10
  data_rate: 40MHz
  mode: mode3

display:
  - platform: ili9xxx
    model: st7789v
    invert_colors: true
    rotation: 180
    dimensions:
      height: 240
      width: 240
      offset_height: 0
      offset_width: 0
    dc_pin: GPIO18         # DC
    reset_pin: GPIO17      # RES
    # backlight_pin: GPIO16 # BLK - backlight_pin not an option on this platform
    # SPI device config
    data_rate: 40MHz
    spi_mode: mode3
    cs_pin: GPIO10         # Chip Select - CS pin not present on my cheap ST7789
#  - platform: st7789v
#    model: "Custom"
#    height: 240
#    width: 240
#    offset_height: 0
#    offset_width: 0
#    dc_pin: GPIO18 # DC
#    reset_pin: GPIO17 # RES
#    backlight_pin: GPIO16 # BLK
#    # SPI device config
#    data_rate: 40MHz
#    spi_mode: mode3
#    cs_pin: GPIO10 # CS - pin not present on display
    lambda: |-
      it.strftime(0, 0, id(f_time), c_time, TextAlign::TOP_LEFT, "%H:%M", id(sntp_time).now());
      it.print(it.get_width()-1, 0, id(f_name), c_name, TextAlign::TOP_RIGHT, "${name}");
      if (id(moisture).has_state()) {
        it.printf(it.get_width()-1, 50, id(f_data), c_data, TextAlign::CENTER_RIGHT, "%.0f%%", id(moisture).state);
      }
      if (id(temperature).has_state()) {
        esphome::Color ct;
        if (id(temperature).state < 6) {
          ct = ct_vcold;
        } else if (id(temperature).state < 10) {
          ct = ct_cold;
        } else if (id(temperature).state < 14) {
          ct = ct_cool;
        } else if (id(temperature).state < 18) {
          ct = ct_mild;
        } else if (id(temperature).state < 23) {
          ct = ct_mod;
        } else if (id(temperature).state < 27) {
          ct = ct_warm;
        } else if (id(temperature).state < 30) {
          ct = ct_vwarm;
        } else {
          ct = ct_hot;
        }
        it.printf(0, it.get_height()/3, id(f_data), ct, TextAlign::CENTER_LEFT, "%.1fÂ°C", id(temperature).state);
      }
      if (id(humidity).has_state()) {
        it.printf(it.get_width()-1, it.get_height()/3, id(f_data), c_data, TextAlign::CENTER_RIGHT, "%.1f%%", id(humidity).state);
      }
      it.graph(10, 120, id(temperature_graph));
